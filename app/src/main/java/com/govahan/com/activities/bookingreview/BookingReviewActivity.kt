package com.govahan.com.activities.bookingreviewimport android.annotation.SuppressLintimport android.app.DatePickerDialogimport android.content.ContentValues.TAGimport android.content.Intentimport android.icu.text.SimpleDateFormatimport android.os.Buildimport android.os.Bundleimport android.util.Logimport android.view.Viewimport androidx.activity.viewModelsimport androidx.annotation.RequiresApiimport androidx.appcompat.app.AppCompatDelegateimport androidx.databinding.DataBindingUtilimport com.bumptech.glide.Glideimport com.govahan.com.Rimport com.govahan.com.activities.bookingsuccess.BookingSuccessActivityimport com.govahan.com.activities.paymentmethods.PaymentMethodsActivityimport com.govahan.com.activities.transportowner.TransportOwnerActivityimport com.govahan.com.baseClasses.BaseActivityimport com.govahan.com.databinding.ActivityBookingReviewBindingimport com.govahan.com.model.bookingloadermodel.BookingLoaderDataimport com.govahan.com.model.bookingloadermodel.BookingLoaderDriverimport com.govahan.com.model.bookingloadermodel.BookingLoaderUserimport com.govahan.com.model.loaderpaymentsuccessmodel.LoaderPaymentSuccessDataimport com.govahan.com.model.loaderpaymentsuccessmodel.LoaderPaymentSuccessDriverimport com.govahan.com.model.loaderpaymentsuccessmodel.LoaderPaymentSuccessUserimport com.govahan.com.model.searchvehiclemodel.SearchVehicleDataimport com.govahan.com.util.toastimport dagger.hilt.android.AndroidEntryPointimport java.text.ParseExceptionimport java.util.*@AndroidEntryPointclass BookingReviewActivity : BaseActivity() {    private lateinit var binding: ActivityBookingReviewBinding    private val B2B_PG_REQUEST_CODE = 777    private var selectedVehicleData: SearchVehicleData? = null    private val viewModel: BookingReviewViewModel by viewModels()    var pickupLocation = ""    var phonepayurl = ""    var dropLocation = ""    var pickupLat = ""    var pickupLong = ""    var dropLat = ""    var dropLong = ""    var vehicle_id = ""    var id = ""    var total_fare=""    var transactionId=""    lateinit var getSelectedPaymentMode: String    var selectedDateFormat2 = ""    var amount=""    var finalPamountInt = 0    val mcurrentTime = Calendar.getInstance()    var hour = mcurrentTime[Calendar.HOUR_OF_DAY]    val minute = mcurrentTime[Calendar.MINUTE]    val zone = mcurrentTime[Calendar.AM_PM]    var driverId=""    var bodytype=""    var capacity=""    var distance=""    var vehicleNumber=""    var date = ""    var time = ""    var aTime = ""    var pretime = ""    var selectedItem = ""    var minutes = mcurrentTime[Calendar.MINUTE]    lateinit var pickedTime: Date    var payAmount = ""    var selectedPaymentModeType = ""    var paymentUserName = ""    var paymentUserEmail = ""    var paymentUserPhone = ""    var payableAmount = ""    companion object {        /*Todo:- Cash*/        var bookingLoaderDataList: ArrayList<BookingLoaderData> = ArrayList()        var bookingLoaderUserList: ArrayList<BookingLoaderUser> = ArrayList()        var bookingLoaderDriverList: ArrayList<BookingLoaderDriver> = ArrayList()        var bookingLoaderRideCode = " "        /*Todo:- Online*/        var bookingLoaderOnlineDataList: ArrayList<LoaderPaymentSuccessData> = ArrayList()        var bookingLoaderOnlineUserList: ArrayList<LoaderPaymentSuccessUser> = ArrayList()        var bookingLoaderOnlineDriverList: ArrayList<LoaderPaymentSuccessDriver> = ArrayList()        var bookingLoaderOnlineRideCode = " "    }    var bPaymentMode: Boolean? = null    @RequiresApi(Build.VERSION_CODES.N)    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM)        binding = DataBindingUtil.setContentView(this, R.layout.activity_booking_review)        binding.header.ivBack.setOnClickListener(View.OnClickListener {            finish()        })        binding.header.tvHeaderText.text = "Booking Review"        binding.llNext.setOnClickListener(View.OnClickListener {            val intent = Intent(this, PaymentMethodsActivity::class.java)            startActivity(intent)        })        binding.tvTypechange.setOnClickListener(View.OnClickListener {            finish()        })        val data = intent.extras        selectedVehicleData = data?.getParcelable<SearchVehicleData>("vehicleDetails")        viewModel.progressBarStatus.observe(this) {            if (it) {                showProgressDialog()            } else {                hideProgressDialog()            }        }        viewModel.bookingReviewResponse.observe(this) {            if (it.status == 1) {                toast(it.message!!)                for (i in 0 until it.data.size) {                    binding.tvVehicleName.text = it.data[i].vehicleName//                    binding.wheelerType.text =  it.data[i].no_of_tyres.toString()                    binding.tvRating.text = it.data[i].rating.toString()                    binding.vehicleNumber.text = it.data[i].vehicleNumber.toString()                    binding.tvCapacity.text = it.data[i].capacity.toString()                    binding.tvDistance.text = it.data[i].distance.toString()                    binding.tvFrom.text = it.data[i].picupLocation.toString()                    binding.tvTo.text = it.data[i].dropupLocation.toString()                    binding.tvBookingdate.text = it.data[i].bookingDate//                    binding.tvBookingtime.text = it.data[i]?.bookingTime.toString()                    binding.tvType.text = it.data[i].bodytype.toString()                    binding.tvDrivername.text = it.data[i].driverName                    binding.tvAmount.text = "₹${it.data[i].totalFare.toString()}"                    binding.tvOwnername.text =it.data[i].vehicleOwnerName                    binding.payableAmount.text = "₹" + it.data[i].amount_pay.toString()                    payAmount = it.data[i].amount_pay.toString()                    Glide.with(this).load(selectedVehicleData?.mainImage).into(binding.ivVehicleImage)                    userPref.setDriverId(it.data[i].driverId.toString())                    pretime = it.data[i].bookingTime.toString()                    pickupLat = it.data[i].pickupLat.toString()                    pickupLong = it.data[i].pickupLong.toString()                    dropLat = it.data[i].dropupLat.toString()                    dropLong = it.data[i].dropupLong.toString()                    payableAmount=it.data[i].amount_pay.toString()                    total_fare=it.data[i].totalFare.toString()                    id=it.data[i].id.toString()                    selectedDateFormat2= it.data[i].bookingDate.toString()                    try {                        val sdf = SimpleDateFormat("H:mm")//                        val dateObj = sdf.parse(it.data[i]?.bookingTime)//                        System.out.println(dateObj)//                        println(SimpleDateFormat("K:mm a").format(dateObj))//                        binding.tvBookingtime.text = SimpleDateFormat("K:mm a").format(dateObj)                    } catch (e: ParseException) {                        e.printStackTrace()                    }                    if (it.data[i].available.toString().equals("0")) {                        binding.tvAvailable.text = "Not Available"                        binding.ivCheck.visibility = View.GONE                    } else if (it.data[i].available.toString().equals("1")) {                        binding.tvAvailable.text = "Available"                        binding.ivCheck.visibility = View.VISIBLE                    }                }            } else {                toast(it.message!!)            }        }        viewModel.bookingLoaderResponseModel.observe(this) {            if (it.status == 1) {                toast(it.message!!)                bookingLoaderDataList.add(it.bookingLoaderData!!)                bookingLoaderUserList.add(it.bookingLoaderUser!!)                bookingLoaderDriverList.add(it.bookingLoaderDriver!!)                bookingLoaderRideCode = it.bookingLoaderrideCode!!                bPaymentMode = false                startActivity(                    Intent(this, BookingSuccessActivity::class.java)                        .putExtra("modelDataList", bookingLoaderDataList)                        .putExtra("modelUserList", bookingLoaderUserList)                        .putExtra("modelDriverList", bookingLoaderDriverList)                        .putExtra("modelRideCode", bookingLoaderRideCode)                        .putExtra("cash", "CASH")                )//                intent.putExtra("modelDataList", bookingLoaderDataList)//                intent.putExtra("modelUserList", bookingLoaderUserList)//                intent.putExtra("modelDriverList", bookingLoaderDriverList)//                intent.putExtra("modelRideCode", bookingLoaderRideCode)//                intent.putExtra("cash",bPaymentMode)                // toast(it.bookingPassengerData[0].bookingId!!)                finish()            } else {                toast(it.message!!)            }        }        viewModel.loaderPaymentSuccessResponseModel.observe(this) {            if (it.status == 1) {                // toast("booking Successful")                toast(it.message!!)                finish()                bookingLoaderOnlineDataList.add(it.data!!)                bookingLoaderOnlineUserList.add(it.user!!)                bookingLoaderOnlineDriverList.add(it.driver!!)                bookingLoaderOnlineRideCode = "1234"                bPaymentMode = true                startActivity(                    Intent(this, BookingSuccessActivity::class.java)                        .putExtra("modelDataList", bookingLoaderOnlineDataList)                        .putExtra("modelUserList", bookingLoaderOnlineUserList)                        .putExtra("modelDriverList", bookingLoaderOnlineDriverList)                        .putExtra("modelRideCode1", bookingLoaderOnlineRideCode)                        .putExtra("online", "ONLINE")                )                finish()            } else {                toast(it.message!!)            }        }        selectedDateFormat2 = selectedVehicleData?.bookingDate!!        time = selectedVehicleData?.bookingTime!!        viewModel.searchLoaderDetailApi(            "Bearer " + userPref.user.apiToken,            selectedVehicleData?.id.toString(),            selectedVehicleData?.task!!,            selectedVehicleData?.picupLocation!!,            selectedVehicleData?.pickupLat!!,            selectedVehicleData?.pickupLong!!,            selectedVehicleData?.dropupLocation!!,            selectedVehicleData?.dropupLat!!,            selectedVehicleData?.dropupLong!!,            selectedVehicleData?.bookingDate!!,            selectedVehicleData?.available!!        )        Log.d(TAG, "onCreate: searchLoaderDetailApi" + selectedVehicleData?.id.toString())        binding.tvDrivername.setOnClickListener(View.OnClickListener {            val intent = Intent(this, TransportOwnerActivity::class.java)            intent.putExtra("putdriveridd", selectedVehicleData?.driverId.toString())            startActivity(intent)        })        /*binding.tvPaymentMode.setOnClickListener(View.OnClickListener {            val intent = Intent(this, PaymentMethodsActivity::class.java)            startActivityForResult(intent, 1)        })*/        binding.llChangeDateTime.setOnClickListener(View.OnClickListener {            clickDataPicker()        })        pickupLocation=selectedVehicleData?.picupLocation!!        pickupLat=selectedVehicleData?.pickupLat!!        pickupLong=  selectedVehicleData?.pickupLong!!        dropLocation= selectedVehicleData?.dropupLocation!!        dropLat= selectedVehicleData?.dropupLat!!        dropLong= selectedVehicleData?.dropupLong!!        driverId= selectedVehicleData?.driverId.toString()        bodytype= selectedVehicleData?.bodytype.toString()        capacity=selectedVehicleData?.capacity.toString()        distance=selectedVehicleData?.distance.toString()       vehicleNumber= selectedVehicleData?.vehicleNumber.toString()        binding.btnConfirmbook.setOnClickListener(View.OnClickListener {            startActivity(Intent(this, PaymentThroughActivity :: class.java).also {                it.putExtra("amount",payableAmount)                it.putExtra("flag", "loader")                it.putExtra("flag1","1")                it.putExtra("total_fare", total_fare)                it.putExtra("pickupLocation", pickupLocation)                it.putExtra("pretime", pretime)                it.putExtra("vehicle_id",   selectedVehicleData?.vehicle_id.toString())                it.putExtra("selectedDateFormat2", selectedDateFormat2)                it.putExtra("pickupLocation", pickupLocation)                it.putExtra("pickupLat", pickupLat)                it.putExtra("pickupLong", pickupLong)                it.putExtra("dropLocation", dropLocation)                it.putExtra("dropLat", dropLat)                it.putExtra("dropLong", dropLong)                it.putExtra("driverId", driverId)                it.putExtra("bodytype", bodytype)                it.putExtra("capacity", capacity)                it.putExtra("distance", distance)                it.putExtra("vehicleNumber", vehicleNumber)                it.putExtra("id",id )            })        })    }//    private fun startPayment() {//        /*//      *  You need to pass current activity in order to let Razorpay create CheckoutActivity//      * *///        amount = (binding.payableAmount.text.toString().replace("₹", "").toFloat() * 100).toInt()//        finalPamountInt = amount////        val activity: Activity = this//        val co = Checkout()//        co.setKeyID("rzp_test_ERu25JeZGdnYjs")//        try {//            var options = JSONObject()//            options.put("name", userPref.user.name)//            options.put("description", "Demoing Charges")//            //You can omit the image option to fetch the image from dashboard//            options.put("image", "https://s3.amazonaws.com/rzp-mobile/images/rzp.png")//            options.put("theme.color", "")//            options.put("currency", "INR")//            options.put("amount", finalPamountInt)//            options.put("send_sms_hash", true)////            val prefill = JSONObject()//            prefill.put("email", userPref.user.email)//            prefill.put("contact", userPref.user.mobileNumber)////            options.put("prefill", prefill)////            co.open(this@BookingReviewActivity, options)//        } catch (e: Exception) {//            Toast.makeText(activity, "Error in payment: " + e.message, Toast.LENGTH_LONG).show()//            e.printStackTrace()//        }//    }    @SuppressLint("SimpleDateFormat")    @RequiresApi(Build.VERSION_CODES.N)    fun clickDataPicker() {        val cal = Calendar.getInstance()        val simpleDateFormat = SimpleDateFormat("dd-MM-yyyy")        val simpleDateFormat2 = SimpleDateFormat("yyyy-MM-dd")        cal.timeZone = TimeZone.getTimeZone("UTC")        val datePickerDialog = DatePickerDialog(            this, R.style.DatePickerTheme, { view, year, monthOfYear, dayOfMonth ->                cal.set(year, monthOfYear, dayOfMonth)                binding.tvBookingdate.text = simpleDateFormat.format(cal.time)                selectedDateFormat2 = simpleDateFormat2.format(cal.time)//                clickTimePicker()            },            cal.get(Calendar.YEAR),            cal.get(Calendar.MONTH),            cal.get(Calendar.DAY_OF_MONTH)        )        datePickerDialog.datePicker.minDate = System.currentTimeMillis() - 1000        datePickerDialog.show()    }//    fun clickTimePicker() {//        val mTimePicker = TimePickerDialog(//            this, { timePicker, selectedHour, selectedMinute ->//                /*val AM_PM: String = if (selectedHour < 12) {//                    "AM"//                } else {//                    "PM"//                }*///                time = "$selectedHour:$selectedMinute "//                // bottomSheet.findViewById<Button>(R.id.tvTime).text = time//                binding.tvBookingtime.text = time//            },//            hour,//            minute + zone,//            false//        ) //Yes 24 hour time//        mTimePicker.setTitle("Select Time")//        mTimePicker.show()//    }}